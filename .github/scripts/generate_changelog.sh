#!/bin/bash
set -euo pipefail

# Check if we have the current tag as an argument
if [ $# -lt 1 ]; then
  echo "Usage: $0 <current-tag>"
  exit 1
fi

CURRENT_TAG=$1
echo "Generating changelog for tag: $CURRENT_TAG"

# Find the previous tag
PREVIOUS_TAG=$(git describe --tags --abbrev=0 $CURRENT_TAG^ 2>/dev/null || echo "")

if [ -z "$PREVIOUS_TAG" ]; then
  echo "No previous tag found, generating changelog from all history"
  # Get the first commit if no previous tag exists
  PREVIOUS_COMMIT=$(git rev-list --max-parents=0 HEAD)
  PR_RANGE="$PREVIOUS_COMMIT..$CURRENT_TAG"
else
  echo "Previous tag: $PREVIOUS_TAG"
  PR_RANGE="$PREVIOUS_TAG..$CURRENT_TAG"
fi

# Extract version number without 'v' prefix
VERSION=${CURRENT_TAG#v}
echo "Version: $VERSION"

# Get all PR numbers merged between the tags
echo "Finding merged PRs between $PR_RANGE..."
MERGED_PRS=$(git log $PR_RANGE --oneline | grep -o '#[0-9]\+' | sed 's/#//')

# Generate the changelog
CHANGELOG="# Changelog for version $VERSION\n\n"

if [ -z "$MERGED_PRS" ]; then
  echo "No merged PRs found between $PR_RANGE"
  CHANGELOG+="No PRs merged in this release.\n"
else
  echo "Found merged PRs: $MERGED_PRS"
  
  # For each PR, extract the changelog section
  for PR_NUMBER in $MERGED_PRS; do
    PR_DATA=$(gh pr view $PR_NUMBER --json title,body)
    
    PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
    PR_BODY=$(echo "$PR_DATA" | jq -r '.body')
    
    # Extract content between "## Changelog" and next section (or end of file)
    CHANGELOG_SECTION=$(echo "$PR_BODY" | awk '/## Changelog/{flag=1;next}/## /{flag=0}flag')
    
    # Only include PRs that have a changelog section
    if [ ! -z "$CHANGELOG_SECTION" ]; then
      CHANGELOG+="## PR #$PR_NUMBER: $PR_TITLE\n\n"
      CHANGELOG+="$CHANGELOG_SECTION\n\n"
    fi
  done
fi

# Output the changelog
echo -e "$CHANGELOG"

# Save to file
echo -e "$CHANGELOG" > CHANGELOG.md
echo "Changelog written to CHANGELOG.md"

#!/bin/bash

# Generate changelog from git log and stored PR changelog entries
# Usage: .github/scripts/generate_changelog.sh [version]

VERSION=${1:-"v$(ruby -r './lib/cm_admin/version.rb' -e 'puts CmAdmin::VERSION')"}

# Initialize CHANGELOG.md with version header
cat > CHANGELOG.md << EOF
# Changelog

## $VERSION ($(date +%Y-%m-%d))

EOF

# Changelog entries directory
CHANGELOG_ENTRIES_DIR=".github/changelog_entries"

# Combine all stored changelog entries if they exist
if [ -d "$CHANGELOG_ENTRIES_DIR" ] && [ -n "$(ls -A "$CHANGELOG_ENTRIES_DIR")" ]; then
  echo "### Features and Changes" >> CHANGELOG.md
  echo "" >> CHANGELOG.md
  
  for entry_file in "$CHANGELOG_ENTRIES_DIR"/*.md; do
    if [ -f "$entry_file" ]; then
      cat "$entry_file" >> CHANGELOG.md
      echo "" >> CHANGELOG.md
    fi
  done
  
  # Clean up changelog entries after combining them
  rm -rf "$CHANGELOG_ENTRIES_DIR"
else
  echo "No changelog entries found from PR descriptions" >> CHANGELOG.md
  echo "" >> CHANGELOG.md
fi

# Add commit history for additional context
echo "### Commit History" >> CHANGELOG.md
echo "" >> CHANGELOG.md

# Get commits since last tag or last 50 commits if no previous tag
PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
if [ -n "$PREVIOUS_TAG" ]; then
  git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" >> CHANGELOG.md
else
  git log --pretty=format:"- %s (%h)" -50 >> CHANGELOG.md
fi

echo "" >> CHANGELOG.md
echo "Generated by release automation" >> CHANGELOG.md

echo "Changelog written to CHANGELOG.md"
